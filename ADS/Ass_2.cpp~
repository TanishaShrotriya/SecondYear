//============================================================================
// Name        : Ass_2.cpp Binary Search Tree
// Author      : 2453
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <queue>
using namespace std;

class Tnode {
  Tnode *left,*right;
  int data;
public:
  Tnode(int d) {
	  left=NULL;
	  right=NULL;
	  data=d;
  }
  friend class BinTree;
};

class BinTree {
	Tnode *root;
public:
	BinTree() {
		root=NULL;
	}
void	 create();
void	 display();
int		 max(int,int);
int		 height(Tnode* temp);
int  	 Height();
void     insert(int data);
Tnode*   inOrder(Tnode * node);
void     min();
void     Min_Rec(Tnode *);
int      Min(Tnode *temp);
void     max();
void     Max_Rec(Tnode *);
int      Max(Tnode *temp);
int      search( Tnode *root,int key);
int      Search(int);
void     mirrornr(Tnode *temp);
void     mirror();
Tnode *  mirror(Tnode *temp);
//search
};
void BinTree :: mirror() {

	mirror(root);
	display();
	mirrornr(root);
}
Tnode* BinTree ::mirror(Tnode *temp) {
	Tnode *ptr;
	if(temp==NULL)
		return NULL;
	else {

		ptr=mirror(temp->left);
		temp->left=mirror(temp->right);
        temp->right=ptr;
	}

}
void BinTree ::mirrornr(Tnode *root) {
    Tnode * temp;
	queue <Tnode*> q;
	q.push(root);

	while(q.empty()==0) {
        root=q.front();
        q.pop();
        cout<<root->data;
		temp=root->left;
		root->left=root->right;
		root->right=temp;

		if(root->left!=NULL) {
		    q.push(root->left);
		}
		if(root->right!=NULL) {
		    q.push(root->right);
		}
   }

}
int BinTree :: Search(int key) {

	return search(root,key);
}
int BinTree::search(Tnode *temp,int key) {
	if(temp==NULL)
		return 0;
	else if(temp->data==key)
		return 1;
	else if(temp->data < key)
		search(temp->right,key);
	else if(temp->data > key)
		search(temp->right,key);
}
int BinTree::Height() {
	return height(root);
}
int BinTree::height(Tnode* temp) {
  if(temp!=NULL){
    return max(height(temp->left),height(temp->right))+1;
  }
  else {
	  return 0;
  }
 }
int BinTree::max(int l,int r){

     if(l>r) {
    	 return l;
     }
     else
    	 return r;
}

void BinTree :: min() {

	cout<<"\nMinimum value is : "<<Min(root) <<" Not recursion";
	cout<<"\nMinimum value is : ";
    Min_Rec(root);
	cout<<" With Recursion";

}
int BinTree :: Min(Tnode *temp) {
    int d=0;
    Tnode * ptr;
    ptr=temp;
	while(ptr->left !=NULL) {
		   ptr=ptr->left;
	}
		d=ptr->data;
		return d;

}
void BinTree :: Min_Rec(Tnode * temp) {

    Tnode * ptr;
    ptr=temp;
    if(ptr->left!=NULL) {
     Min_Rec(ptr->left);
    }
    else{
     cout<<ptr->data;
    }

}
void BinTree :: max() {

	cout<<"\nMaximum value is : "<<Max(root) <<" Not recursion";
	cout<<"\nMaximum value is : ";
    Max_Rec(root);
	cout<<" With Recursion";

}
int BinTree :: Max(Tnode *temp) {
    int d=0;
    Tnode * ptr;
    ptr=temp;
	while(ptr->right !=NULL) {
		   ptr=ptr->right;
	}
		d=ptr->data;
		return d;

}
void BinTree :: Max_Rec(Tnode * temp) {

    Tnode * ptr;
    ptr=temp;
    if(ptr->right!=NULL) {
     Min_Rec(ptr->right);
    }
    else{
     cout<<ptr->data;
    }

}

void BinTree::insert(int d) {
    Tnode *ptr,*temp;
	temp=new Tnode(d);
    if(root==NULL){
		root=temp;
    }
	else {
	      ptr=root;
		  while(1) {

		      if(temp->data < ptr->data){
		    	  if(ptr->left==NULL){
		    		  ptr->left=temp;
		    	      break;
		    	  }
		    	  else
		    		  ptr=ptr->left;

		      }
		      else if(temp->data > ptr->data){
		      	   if(ptr->right==NULL){
		      		   ptr->right=temp;
		      	       break;
		      	   }
		      	   else
		      		   ptr=ptr->right;
		       }

		  }

	}

}

Tnode* BinTree::inOrder(Tnode *temp) {
  if(temp!=NULL) {

      inOrder(temp->left);
      cout<<temp->data<<" ";
      inOrder(temp->right);
      return NULL;
  }
  else {
	  return NULL;
  }
}
  void BinTree::display() {
  inOrder(this->root);
  cout<<"\n";
}

int main() {
    BinTree T1;
    int choice;
    int d;
	char ch;
	do{
	cout<<"\nChoose operation:\n1.Accept tree\n2.Display";
	cout<<"\n3.Find the minimum element\n4.Find max element";
	cout<<"\n5.Find height of tree\n6.Find an element";
	cout<<"\n7.Swap nodes";
	cin>>choice;
	switch(choice) {
	case 1:	{
		      char ch;
	          do{
	               cout<<"\nEnter data node :";
	               cin>>d;
		           T1.insert(d);
		           cout<<"Add another node?";
		           cin>>ch;
		        }while(ch=='y');
         	}
	        break;
	case 2:T1.display();
	       break;
	case 3:T1.min();
	       break;
	case 4:T1.max();
	       break;
	case 5:cout<<T1.Height();
	       break;
	case 6:{
		    int ch;
		    cout<<"\nEnter element to search";
		    cin>>ch;
		    int x=T1.Search(ch);
		    if(x==0)
		    	cout<<"\nElement not found";
		    else if(x==1)
		    	cout<<"\nElement found";
	        }
			break;
	case 7: T1.mirror();
			break;
	}
	cout<<"\nDo you want to continue? y/n";
	cin>>ch;
	}while(ch=='y');
	return 0;
}
